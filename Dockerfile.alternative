# Alternative Dockerfile with additional optimizations
# This version uses multi-stage builds and pip caching

FROM python:3.11-slim as builder

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_DEFAULT_TIMEOUT=300 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y build-essential curl && rm -rf /var/lib/apt/lists/*

# Upgrade pip
RUN pip install --upgrade pip

# Copy requirement files
COPY requirements*.txt /app/

# Create a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install dependencies in stages with very long timeouts
# If one package fails, the others won't need to be re-downloaded
RUN pip install --timeout=2000 --retries=10 -r /app/requirements-base.txt || \
    (echo "Retrying base requirements..." && sleep 10 && pip install --timeout=2000 --retries=10 -r /app/requirements-base.txt)

RUN pip install --timeout=2000 --retries=10 -r /app/requirements-ml.txt || \
    (echo "Retrying ML requirements..." && sleep 10 && pip install --timeout=2000 --retries=10 -r /app/requirements-ml.txt)

RUN pip install --timeout=2000 --retries=10 -r /app/requirements-playwright.txt || \
    (echo "Retrying playwright..." && sleep 10 && pip install --timeout=2000 --retries=10 -r /app/requirements-playwright.txt)

# Final stage
FROM python:3.11-slim

WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install runtime dependencies only
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

COPY . /app

EXPOSE 8000 8501

CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]

